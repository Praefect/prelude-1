// ==========================================================================
// Helper mixins
// ==========================================================================


// Clearfixs
// ==========================================================================

// Clearfix
.clearfix() {
  &:before,
  &:after {
      content: "";
      display: table;
  }
  &:after {
      clear: both;
  }
}
.clearfix() when not (@using-ieclasses) {
  *zoom: 1;
}
.clearfix() when (@using-ieclasses) {
  .ie6 &, .ie7 & {
    zoom: 1;
  }
}

// Clearfix
// @see http://nicolasgallagher.com/micro-clearfix-hack/
.mobile-clearfix() {
  .clearfix();
  &:last-child {
    float: none;
  }
}

// Inline block
// ==========================================================================
.inline-block() {
  display: inline-block;
}
.inline-block() when (@using-ieclasses) {
  .ie7 & {
    display: inline;
    zoom: 1;
  }
}

.inline-block() when not (@using-ieclasses) {
  *display: inline;
  *zoom: 1;
}


// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
.ie7-restore-left-whitespace() when (@using-ieclasses) {
  .ie7 & {
    *margin-left: .3em;

    &:first-child {
      *margin-left: 0;
    }
  }
}

.ie7-restore-left-whitespace() when not (@using-ieclasses) {
  *margin-left: .3em;

  &:first-child {
    *margin-left: 0;
  }
}

.ie7-restore-right-whitespace() when (@using-ieclasses) {
  .ie7 & {
    *margin-right: .3em;
  }
}

.ie7-restore-right-whitespace() when not (@using-ieclasses) {
  *margin-right: .3em;
}

// hidden
// ==========================================================================
.hidden() {
  display: none !important;
  visibility: hidden;
}

.visually-hidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  &.focusable:active,
  &.focusable:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
  }
}

// border radius without background clip fix
// LESS Hat adds background-clip: padding-box, because it fixes problem with older Safari. 
// http://tumble.sneak.co.nz/post/928998513/fixing-the-background-bleed
// ==========================================================================
.clean-border-radius(...) {

  @webkit_local: true;
  @moz_local: true;
  @w3c_local: true;

  @process: ~`(function(value){value=value||"0";var numRegex=/\d/gi,numWithoutValue=/(?:\s|^)(\.?\d+\.?\d*)(?![^(]*\)|\w|%|\.)/gi;return/^[^, ]*,/.test(value)&&(value=value.replace(/(?:,)(?![^(]*\))/g,"")),numRegex.test(value)&&(value=value.replace(numWithoutValue,function(match){return match+"px"})),value})((function(){var args="@{arguments}";return args=args.replace(/^\[|\]$/g,"")})())`;

  .result (@arguments, @signal, @boolean, @local_boolean) when (@boolean = true) and (@local_boolean = true) {
    .inception (@signal, @arguments) when (@signal = 1) and (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) { -webkit-border-radius: @process; }
    .inception (@signal, @arguments) when (@signal = 1) and not (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) {} 
    .inception (@signal, @arguments) when (@signal = 2) and (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) { -moz-border-radius: @process; }
    .inception (@signal, @arguments) when (@signal = 2) and not (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) {} 
    .inception (@signal, @arguments) when (@signal = 3) and (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) { border-radius: @process;  }
    .inception (@signal, @arguments) when (@signal = 3) and not (isstring(@process)) and not (iscolor(@process)) and not (isnumber(@process)) and not (iskeyword(@process)) and not (isurl(@process)) and not (ispixel(@process)) and not (ispercentage(@process)) and not (isem(@process)) {} 
    .inception(@signal, @arguments);
  }
  .result (@arguments, @signal, @boolean, @local_boolean) when not (@boolean = true), not (@local_boolean = true) {}

  .result(@arguments, 1, @webkit, @webkit_local);
  .result(@arguments, 2, @moz, @moz_local);
  .result(@arguments, 3, @w3c, @w3c_local);

}